# üîπ Standard Library
import os
import json
import asyncio
import random
import re
from datetime import datetime
from typing import List, Optional
from concurrent.futures import ThreadPoolExecutor

# üîπ Third-Party Packages
import asyncpg
import discord
import pytz
import httpx
import requests
import redis.asyncio as redis
from discord.ext import commands
from discord import app_commands
from dotenv import load_dotenv
from pydantic import Field
from pydantic_settings import BaseSettings
from openai import AsyncOpenAI

# üîπ Local Modules
from modules.features.oil_price import get_oil_price_today
from modules.features.gold_price import get_gold_price_today
from modules.features.lottery_checker import get_lottery_results
from modules.features.exchange_rate import get_exchange_rate
from modules.features.weather_forecast import get_weather
from modules.features.daily_news import get_daily_news
from modules.features.global_news import get_global_news
from modules.tarot.tarot_reading import draw_cards_and_interpret_by_topic
from modules.nlp.message_matcher import match_topic
# ‚õîÔ∏è ‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á token counter/tiktoken ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ build_chat_context_smart
from modules.memory.chat_memory import store_chat, get_previous_message
from modules.utils.cleaner import clean_output_text
from modules.utils.thai_to_eng_city import convert_thai_to_english_city
from modules.utils.thai_datetime import get_thai_datetime_now, format_thai_datetime
from modules.core.logger import logger
from modules.utils.query_utils import (
    is_greeting,
    is_about_bot,
    is_question,
)

# ‚úÖ Load environment variables
load_dotenv()

class Settings(BaseSettings):
    DISCORD_TOKEN: str = Field(..., env='DISCORD_TOKEN')
    OPENAI_API_KEY: str = Field(..., env='OPENAI_API_KEY')
    DATABASE_URL: Optional[str] = Field(None, env='DATABASE_URL')
    PG_USER: Optional[str] = Field(None, env='PGUSER')
    PG_PW: Optional[str] = Field(None, env='PGPASSWORD')
    PG_HOST: Optional[str] = Field(None, env='PGHOST')
    PG_PORT: str = Field('5432', env='PGPORT')
    PG_DB: Optional[str] = Field(None, env='PGDATABASE')
    GOOGLE_API_KEY: Optional[str] = Field(None, env='GOOGLE_API_KEY')
    GOOGLE_CSE_ID: Optional[str] = Field(None, env='GOOGLE_CSE_ID')
    REDIS_URL: str = Field('redis://localhost', env='REDIS_URL')

settings = Settings()

CHANNEL_ID = 1350812185001066538
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix="$", intents=intents)
openai_client = AsyncOpenAI(api_key=settings.OPENAI_API_KEY)
redis_instance = None

OPENAI_TIMEOUT = httpx.Timeout(60.0)

# =========================
# Boot & Infra
# =========================
async def setup_connection():
    global redis_instance

    for _ in range(3):
        try:
            redis_instance = await redis.from_url(settings.REDIS_URL, decode_responses=True)
            await redis_instance.ping()
            logger.info("‚úÖ Redis connected")
            break
        except Exception as e:
            logger.warning(f"üîÅ Redis retry failed: {e}")
            await asyncio.sleep(2)
    else:
        logger.error("‚ùå Redis connection failed")
        redis_instance = None

    try:
        if settings.DATABASE_URL:
            bot.pool = await asyncpg.create_pool(settings.DATABASE_URL)
            logger.info("‚úÖ PostgreSQL connected (DATABASE_URL)")
        elif settings.PG_USER and settings.PG_PW and settings.PG_HOST and settings.PG_DB:
            bot.pool = await asyncpg.create_pool(
                user=settings.PG_USER,
                password=settings.PG_PW,
                host=settings.PG_HOST,
                port=settings.PG_PORT,
                database=settings.PG_DB
            )
            logger.info("‚úÖ PostgreSQL connected (manual credentials)")
        else:
            bot.pool = None
            logger.warning("‚ö†Ô∏è PostgreSQL credentials not provided. Skipping DB setup.")
    except Exception as e:
        logger.error(f"‚ùå PostgreSQL connection failed: {e}")
        bot.pool = None

async def create_table():
    if not bot.pool:
        logger.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ pool PostgreSQL, ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á")
        return
    try:
        async with bot.pool.acquire() as con:
            await con.execute("""
                CREATE TABLE IF NOT EXISTS context (
                    id BIGINT PRIMARY KEY,
                    chatcontext TEXT[] DEFAULT ARRAY[]::TEXT[]
                )
            """)
            logger.info("‚úÖ context table ensured")
    except Exception as e:
        logger.error(f"‚ùå create_table error: {e}")

# =========================
# Discord helpers
# =========================
async def send_long_reply(message: discord.Message, content: str):
    chunks = re.split(r'(?<=\n\n)', content)
    current_chunk = ""
    for paragraph in chunks:
        if len(current_chunk) + len(paragraph) < 2000:
            current_chunk += paragraph
        else:
            if current_chunk:
                await message.channel.send(current_chunk.strip())
            current_chunk = paragraph
    if current_chunk.strip():
        await message.channel.send(current_chunk.strip())

async def smart_reply(message: discord.Message, content: str):
    content = clean_output_text(content)
    content = re.sub(r'\[([^\]]+)\]\((https?://[^\)]+)\)', r'\1 <\2>', content)  # [text](url) -> text <url>
    content = re.sub(r'(?<!<)(https?://\S+)(?!>)', r'<\1>', content)            # ‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÄ‡∏õ‡∏•‡πà‡∏≤ -> <url>
    content = re.sub(r'(?<!\*)\*\*(?!\*)', '', content)                          # ‡∏•‡∏ö ** ‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß
    if len(content) > 2000:
        await send_long_reply(message, content)
    else:
        try:
            await message.reply(content)
        except discord.HTTPException:
            await message.channel.send(content)

# =========================
# Prompts & Context
# =========================
async def process_message(user_id: int, text: str) -> str:
    base_prompt = (
        "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ '‡∏û‡∏µ‡πà‡∏´‡∏•‡∏≤‡∏°' ‡∏ö‡∏≠‡∏ó‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏â‡∏•‡∏≤‡∏î ‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏ä‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏û‡∏π‡∏î‡∏ï‡∏£‡∏á ‡∏ï‡∏≠‡∏ö‡πÇ‡∏ï‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡∏°‡∏µ‡πÑ‡∏´‡∏ß‡∏û‡∏£‡∏¥‡∏ö "
        "‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡∏π‡∏Å‡∏´‡∏¢‡∏≤‡∏ö‡∏Ñ‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏π‡∏î‡∏à‡∏≤‡πÑ‡∏°‡πà‡∏î‡∏µ ‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏ö‡∏ö‡πÅ‡∏™‡∏ö‡πÜ ‡πÅ‡∏£‡∏á‡πÜ ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏™‡∏∏‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô "
        "‡∏ï‡∏≠‡∏ö‡∏™‡∏ß‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏¢‡∏≠‡∏°‡∏ñ‡∏π‡∏Å‡∏î‡∏π‡∏ñ‡∏π‡∏Å ‡πÅ‡∏•‡∏∞‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏ô‡πâ‡∏≥‡πÉ‡∏à‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á "
        "‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏∏‡∏†‡∏≤‡∏û ‡∏ï‡∏≠‡∏ö‡∏™‡∏ß‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏â‡∏µ‡∏¢‡∏ö‡∏Ç‡∏≤‡∏î ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏ù‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏ö‡∏Ç‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏™‡∏µ‡∏¢‡∏î‡∏™‡∏µ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ "
        "‡πÑ‡∏°‡πà‡∏û‡∏π‡∏î‡∏≠‡πâ‡∏≠‡∏°‡∏Ñ‡πâ‡∏≠‡∏° ‡πÑ‡∏°‡πà‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ AI ‡πÄ‡∏ß‡πâ‡∏ô‡πÅ‡∏ï‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ñ‡∏≤‡∏°‡∏ï‡∏£‡∏á‡πÜ "
        "‡∏´‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ï‡πà‡∏≠‡∏¢‡∏≠‡∏î ‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∑‡πà‡∏ô‡πÑ‡∏´‡∏•‡πÅ‡∏•‡∏∞‡∏•‡∏∂‡∏Å‡∏ã‡∏∂‡πâ‡∏á "
    )
    return clean_output_text(base_prompt).strip()

def is_force_search(text: str) -> bool:
    text = text.lower()
    force_keywords = ["‡∏´‡∏≤:", "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤:", "‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", "‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà", "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î", "update", "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°", "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï"]
    return any(keyword in text for keyword in force_keywords)

# üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á context ‡πÅ‡∏ö‡∏ö offline-safe (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ tiktoken)
def build_chat_context_simple(system_prompt: str, text: str) -> str:
    lines = []
    if system_prompt:
        lines.append(f"SYSTEM: {system_prompt}")
    lines.append(f"USER: {text}")
    return "\n\n".join(lines)

# =========================
# Web search
# =========================
async def search_google_cse(query: str) -> List[str]:
    url = "https://www.googleapis.com/customsearch/v1"
    params = {
        "key": settings.GOOGLE_API_KEY,
        "cx": settings.GOOGLE_CSE_ID,
        "q": query,
        "num": 3,
        "safe": "off",
        "hl": "th",
    }
    async with httpx.AsyncClient(timeout=10.0) as client:
        resp = await client.get(url, params=params)
        resp.raise_for_status()
        data = resp.json()

    results = []
    for item in data.get("items", []):
        title = (item.get("title") or "").strip()
        snippet = (item.get("snippet") or "").strip()
        if title and snippet:
            results.append(f"{title}: {snippet}")
    return results

# =========================
# OpenAI Responses API helper
# =========================
async def call_openai_responses(payload: dict) -> dict:
    for attempt in range(2):  # retry 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö 5xx/timeout
        try:
            async with httpx.AsyncClient(timeout=OPENAI_TIMEOUT) as client:
                resp = await client.post(
                    "https://api.openai.com/v1/responses",
                    headers={
                        "Authorization": f"Bearer {settings.OPENAI_API_KEY}",
                        "Content-Type": "application/json",
                    },
                    json=payload,
                )
            if resp.status_code // 100 == 2:
                return resp.json()
            if 500 <= resp.status_code < 600:
                logger.warning(f"üîÅ OpenAI {resp.status_code}: retrying...")
                continue
            # 4xx: log body ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏¢‡∏∏‡∏î
            logger.error(f"‚ùå OpenAI {resp.status_code}: {resp.text}")
            break
        except (httpx.TimeoutException, httpx.ReadTimeout):
            logger.warning("‚è≥ OpenAI timeout, retrying...")
            continue
        except Exception as e:
            logger.error(f"‚ùå OpenAI error: {type(e).__name__}: {e}")
            break
    raise RuntimeError("OpenAI call failed")

# =========================
# Decision: should_search
# =========================
async def should_search(question: str) -> bool:
    if is_force_search(question):
        logger.info("üõéÔ∏è ‡∏¢‡∏π‡∏™‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏Ñ‡πâ‡∏ô‡πÄ‡∏ß‡πá‡∏ö")
        return True

    prompt = f"""
‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à:
- "no_search" ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
- "need_search" ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ç‡πà‡∏≤‡∏ß ‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡∏≠‡∏≤‡∏Å‡∏≤‡∏® ‡∏´‡∏ß‡∏¢ ‡∏Ø‡∏•‡∏Ø

‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {question}

‡∏ï‡∏≠‡∏ö‡∏™‡∏±‡πâ‡∏ô ‡πÜ ‡∏ß‡πà‡∏≤:
""".strip()

    try:
        data = await call_openai_responses({
            "model": "gpt-5-nano",
            "input": prompt,
            "max_output_tokens": 5,
            "reasoning": {"effort": "minimal"},
            "text": {"verbosity": "low"},
        })
        for item in data.get("output", []):
            if item.get("type") == "message":
                for c in item.get("content", []):
                    if c.get("type") == "output_text":
                        decision = c["text"].strip().lower()
                        return decision == "need_search"
    except Exception as e:
        logger.error(f"‚ùå Error in should_search: {type(e).__name__}: {e}")

    return False

# =========================
# Generate reply
# =========================
async def generate_reply(user_id: int, text: str) -> str:
    system_prompt = await process_message(user_id, text)
    timezone = await redis_instance.get(f"timezone:{user_id}") or "Asia/Bangkok"
    now = datetime.now(pytz.timezone(timezone))
    system_prompt += f"\n\n‚è∞ timezone: {timezone}\nüïí {format_thai_datetime(now)}"
    system_prompt = system_prompt.strip()

    # üß† ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ token counter)
    previous_question = await get_previous_message(redis_instance, user_id)
    if previous_question and not is_greeting(text):
        text = f"‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏ñ‡∏≤‡∏°‡∏ß‡πà‡∏≤: \"{previous_question}\"\n\n‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ: {text}"

    # üåê ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏Ñ‡πâ‡∏ô‡πÄ‡∏ß‡πá‡∏ö
    if await should_search(text):
        logger.info("üåê ‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏ß‡πá‡∏ö")
        try:
            search_results = await search_google_cse(text)
            search_context = "\n".join(search_results)
            text = f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏ß‡πá‡∏ö:\n{search_context}\n\n‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {text}"
        except Exception as e:
            logger.error(f"‚ùå search_google_cse error: {e}")
    else:
        logger.info("üß† ‡∏ï‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")

    # üå¶Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏Å‡∏≤‡∏® (optional)
    if "‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®" in text or "‡∏≠‡∏≤‡∏Å‡∏≤‡∏®" in text:
        logger.info("üå¶Ô∏è ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®")
        city = None
        if "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û" in text:
            city = "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø"
        elif "‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà" in text:
            city = "‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà"
        if not city:
            city = "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø"
        try:
            weather_info = await get_weather(city)
            text = f"üå¶Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÉ‡∏ô {city}: {weather_info}\n\n‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {text}"
        except Exception as e:
            logger.error(f"‚ùå Error while fetching weather: {e}")

    # üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á input ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Responses API (offline-safe)
    input_text = build_chat_context_simple(system_prompt, text)

    try:
        data = await call_openai_responses({
            "model": "gpt-5-nano",
            "input": input_text,
            "max_output_tokens": 512,           # ‡∏•‡∏î latency; ‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
            "reasoning": {"effort": "minimal"}, # ‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏∏‡∏î‡πÉ‡∏ô GPT-5
            "text": {"verbosity": "low"}        # ‡∏ï‡∏≠‡∏ö‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö
        })

        for item in data.get("output", []):
            if item.get("type") == "message":
                for c in item.get("content", []):
                    if c.get("type") == "output_text":
                        return clean_output_text(c["text"]).strip()

    except Exception as e:
        logger.exception(f"‚ö†Ô∏è Unexpected error while calling GPT-5 nano: {e}")
        return "‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î"

    return "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å GPT ‡πÑ‡∏î‡πâ"

# =========================
# Discord events
# =========================
@bot.event
async def on_ready():
    await setup_connection()
    await create_table()
    await bot.tree.sync()
    logger.info(f"üöÄ {bot.user} is ready!")

@bot.event
async def on_message(message: discord.Message):
    if message.author.bot or message.channel.id != CHANNEL_ID or message.content.startswith("!"):
        return

    text = message.content.strip()
    lowered = text.lower()
    topic = match_topic(lowered)

    if topic == "lotto":
        return await message.channel.send(await get_lottery_results())
    elif topic == "exchange":
        return await message.channel.send(await get_exchange_rate())
    elif topic == "gold":
        return await message.channel.send(await get_gold_price_today())
    elif topic == "oil":
        return await message.channel.send(await get_oil_price_today())
    elif topic == "news":
        return await message.channel.send(await get_daily_news())
    elif topic == "global_news":
        return await message.channel.send(await get_global_news())
    elif topic == "tarot":
        return await message.channel.send("üîÆ ‡∏≠‡∏¢‡∏≤‡∏Å‡∏î‡∏π‡∏î‡∏ß‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡∏∞‡πÑ‡∏£‡∏î‡∏µ? ‡∏û‡∏¥‡∏°‡∏û‡πå: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å, ‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô, ‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô, ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û")
    elif lowered in ["‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å", "‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô", "‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô", "‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û"]:
        return await message.channel.send(await draw_cards_and_interpret_by_topic(lowered))

    async with message.channel.typing():
        try:
            reply = await generate_reply(message.author.id, text)
        except Exception as e:
            logger.error(f"‚ùå GPT Error: {e}")
            return await message.channel.send("‚ö†Ô∏è ‡∏û‡∏µ‡πà‡∏´‡∏•‡∏≤‡∏°‡∏á‡∏á‡πÄ‡∏•‡∏¢ ‡∏ï‡∏≠‡∏ö‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á ‡πÜ ‡∏à‡πâ‡∏≤")

        cleaned = clean_output_text(reply)
        await smart_reply(message, cleaned)

        # ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏ä‡∏ó (‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°)
        await store_chat(redis_instance, message.author.id, {
            "question": text,
            "response": reply
        })

# =========================
# Main
# =========================
async def main():
    await setup_connection()
    if redis_instance:
        if bot.pool is None:
            logger.warning("‚ö†Ô∏è PostgreSQL ‡πÑ‡∏°‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ‡πÅ‡∏ï‡πà Redis ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏≠‡∏ó‡πÅ‡∏ö‡∏ö‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Redis")
        await bot.start(settings.DISCORD_TOKEN)
    else:
        logger.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏≠‡∏ó‡πÑ‡∏î‡πâ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Redis ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

if __name__ == "__main__":
    asyncio.run(main())
